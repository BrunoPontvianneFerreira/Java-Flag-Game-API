/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package projeto_ed;

import projeto_ed.Game.*;
import projeto_ed.Graphs.*;
import projeto_ed.MapsManagement.*;
import projeto_ed.Queues.LinkedQueue;

import java.util.Iterator;
import java.util.Scanner;

public class App {

    public static void main(String[] args) {
        Mapa mapa = new Mapa(100);
        for (int i = 0; i < 100; i++) {
            Vertice v = new Vertice();
            v.setIndex(i + 1);
            mapa.addVertex(v);
        }

        mapa.gerarGrafoCompletoAleatorioNaoDirecionado(10);
        mapa.printMapa();
        mapa.printArestas();

        Vertice flag1 = mapa.getVertice(5);
        flag1.setHasFlag1(true);

        Vertice flag2 = mapa.getVertice(10);
        flag2.setHasFlag2(true);

        mapa.removeEdge(flag1, flag2);
        mapa.removeEdge(flag2, flag1);


        BotShortestPath bot1 = new BotShortestPath("B1", Equipa.EQUIPA1);
        BotTree bot2 = new BotTree("B2", Equipa.EQUIPA1);
        BotShortestEdge bot3 = new BotShortestEdge("B3", Equipa.EQUIPA1);
        bot1.createRout(mapa, flag1, flag2);
        bot2.createRout(mapa, flag1, flag2);
        bot3.createRout(mapa, flag1, flag2);

        Iterator<Vertice> iterator1 = mapa.iteratorShortestPath(flag1, flag2);
        Iterator<Vertice> iterator2 = mapa.treeIterator(flag1, flag2);
        Iterator<Vertice> iterator3 = mapa.weightedShortestPathIterator(flag1, flag2);

        while (iterator1.hasNext()) {
            Vertice vertice = iterator1.next();
            System.out.print(vertice.getindex() + " -> ");
        }
System.out.print("\n");
        while (iterator2.hasNext()) {
            Vertice vertice = iterator2.next();
            System.out.print(vertice.getindex() + " -> ");
        }
        System.out.print("\n");
        while (iterator3.hasNext()) {
            Vertice vertice = iterator3.next();
            System.out.print(vertice.getindex() + " -> ");
        }
        System.out.print("\n");
        do {
            mapa.printNeighbors(bot1);
            bot1.play(mapa);
            mapa.printMapa();
            Iterator<Vertice> iterator4 = mapa.iteratorShortestPath(mapa.getVertice(bot1.getVertice_index()), flag2);
            System.out.println("BOT1");
            while (iterator4.hasNext()) {
                Vertice vertice = iterator4.next();
                System.out.print(vertice.getindex() + " -> ");
            }
            mapa.printNeighbors(bot2);
            bot2.play(mapa);
            mapa.printMapa();
            Iterator<Vertice> iterator5 = mapa.iteratorShortestPath(mapa.getVertice(bot2.getVertice_index()), flag2);
            System.out.println("BOT2");
            while (iterator5.hasNext()) {
                Vertice vertice = iterator5.next();
                System.out.print(vertice.getindex() + " -> ");
            }
            mapa.printNeighbors(bot3);
            bot3.play(mapa);
            mapa.printMapa();
            Iterator<Vertice> iterator6 = mapa.iteratorShortestPath(mapa.getVertice(bot3.getVertice_index()), flag2);
            System.out.println("BOT3");
            while (iterator6.hasNext()) {
                Vertice vertice = iterator6.next();
                System.out.print(vertice.getindex() + " -> ");
            }
        } while (!bot1.getRota().isEmpty() && !bot2.getRota().isEmpty() && !bot3.getRota().isEmpty());

    }
}
