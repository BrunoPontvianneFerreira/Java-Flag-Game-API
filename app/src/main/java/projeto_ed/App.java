/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package projeto_ed;

import projeto_ed.Game.Mapa;
import projeto_ed.Game.Vertice;
import projeto_ed.Graphs.*;

import java.util.Iterator;

public class App {

    public static void main(String[] args) {
        System.out.println("--------------------------------------------------------------");
        Mapa grafo = new Mapa(15);

        for (int i = 1; i <= 15; i++) {
            Vertice vertice = new Vertice();
            grafo.addVertex(vertice);
        }

        grafo.gerarGrafoCompletoAleatorioNaoDirecionado(50);

        // Imprime o grafo
        grafo.printMapa();
        grafo.printArestas();

        // Testa o iterador treeIterator
        Vertice flag1 = grafo.getVertice(5);
        flag1.setHasFlag1(true);
        Vertice flag2 = grafo.getVertice(10);
        flag2.setHasFlag1(true);


        System.out.println("ARVORE: Caminho mínimo entre " + flag1.getindex() + " e " + flag2.getindex() + ":");
        Iterator<Vertice> iterator = grafo.treeIterator(flag1, flag2);

        while (iterator.hasNext()) {
            System.out.print(iterator.next().getindex() + " ");
        }

        System.out.println("\nCUSTO MINIMO: Caminho mínimo entre " + flag1.getindex() + " e " + flag2.getindex() + ":");
        Iterator<Vertice> iterator2 = grafo.iteratorShortestPath(flag1, flag2);

        while (iterator2.hasNext()) {
            System.out.print(iterator2.next().getindex() + " ");
        }


        System.out.println("\nCUSTO MINIMO ARESTAS: Caminho mínimo entre " + flag1.getindex() + " e " + flag2.getindex() + ":");
        Iterator<Vertice> iterator3 = grafo.weightedShortestPathIterator(flag1, flag2);

        while (iterator3.hasNext()) {
            System.out.print(iterator3.next().getindex() + " ");
        }


    }
}
