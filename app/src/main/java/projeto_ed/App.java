/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package projeto_ed;

import projeto_ed.Game.*;
import projeto_ed.Graphs.*;
import projeto_ed.Queues.LinkedQueue;

import java.util.Iterator;

public class App {

    public static void main(String[] args) {

        Network<String> graph = new Network<>();
        Mapa mapa = new Mapa(100);
        for (int i = 1; i <= 100; i++) {
            Vertice vertice = new Vertice();
            mapa.addVertex(vertice);
        }

        mapa.gerarGrafoCompletoAleatorioDirecionado(30);
        System.out.println(mapa.isConnected());

        // Imprimir o mapa
        mapa.printMapa();
        mapa.printArestas();

        Vertice bandeira1 = mapa.getVertice(17);
        bandeira1.setHasFlag1(true);
        Vertice bandeira2 = mapa.getVertice(20);
        bandeira2.setHasFlag2(true);
        mapa.removeEdge(bandeira1, bandeira2);
        mapa.removeEdge(bandeira2, bandeira1);


        double custo = mapa.shortestPathWeight(bandeira1, bandeira2);
        System.out.println(custo);
        BotShortestPath bot = new BotShortestPath("B1", Equipa.EQUIPA1);
        bot.createRout(mapa, bandeira1, bandeira2);
        LinkedQueue<Vertice> shortestPath = bot.getRota();


        System.out.println("------BOT 2--------------------------------------------------------");

        BotShortestEdge bot2 = new BotShortestEdge("B2", Equipa.EQUIPA1);
        bot2.createRout(mapa, bandeira2, bandeira1);
        LinkedQueue<Vertice> shortestPathEdge = bot2.getRota();
        do {
            bot.play(mapa);
            bot2.play(mapa);
            mapa.printMapa();

        }while(!shortestPathEdge.isEmpty() && !shortestPath.isEmpty());

        System.out.println("--------------------------------------------------------------");



    }
}
